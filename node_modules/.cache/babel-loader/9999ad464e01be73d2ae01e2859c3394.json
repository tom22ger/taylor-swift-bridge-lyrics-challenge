{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef } from \"react\";\nimport Word from \"./Word\";\nexport default function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [activeWord, setActiveWord] = useState(0);\n\n  function solveQuestion() {\n    return;\n  }\n\n  function toNextWord() {\n    setActiveWord(activeWord + 1);\n\n    if (activeWord === missingWords.length) {\n      solveQuestion();\n    }\n  }\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n\n    for (let i in words) {\n      renderedWords.push( /*#__PURE__*/React.createElement(Word, {\n        key: i,\n        word: words[i],\n        toNextWord: toNextWord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return renderedWords;\n  }\n\n  const missingWords = parseWords(props.missingLyrics);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, props.givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, missingWords));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","Word","Question","props","activeWord","setActiveWord","solveQuestion","toNextWord","missingWords","length","parseWords","sentence","words","split","renderedWords","i","push","missingLyrics","givenLyrics"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,CAAD,CAA5C;;AAEA,WAASO,aAAT,GAAyB;AACvB;AACD;;AAED,WAASC,UAAT,GAAsB;AACpBF,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;;AACA,QAAIA,UAAU,KAAKI,YAAY,CAACC,MAAhC,EAAwC;AACtCH,MAAAA,aAAa;AACd;AACF;;AAED,WAASI,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACA,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIC,CAAT,IAAcH,KAAd,EAAqB;AACnBE,MAAAA,aAAa,CAACE,IAAd,eACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAED,CAAX;AAAc,QAAA,IAAI,EAAEH,KAAK,CAACG,CAAD,CAAzB;AAA8B,QAAA,UAAU,EAAER,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,WAAOO,aAAP;AACD;;AACD,QAAMN,YAAY,GAAGE,UAAU,CAACP,KAAK,CAACc,aAAP,CAA/B;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMd,KAAK,CAACe,WAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMV,YAAN,CAFF,CADF;AAMD","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Word from \"./Word\";\n\nexport default function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [activeWord, setActiveWord] = useState(0);\n\n  function solveQuestion() {\n    return;\n  }\n\n  function toNextWord() {\n    setActiveWord(activeWord + 1);\n    if (activeWord === missingWords.length) {\n      solveQuestion();\n    }\n  }\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n    for (let i in words) {\n      renderedWords.push(\n        <Word key={i} word={words[i]} toNextWord={toNextWord}></Word>\n      );\n    }\n    return renderedWords;\n  }\n  const missingWords = parseWords(props.missingLyrics);\n\n  return (\n    <div>\n      <div>{props.givenLyrics}</div>\n      <div>{missingWords}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}