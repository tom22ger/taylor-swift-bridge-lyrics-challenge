{"ast":null,"code":"import _slicedToArray from\"/Users/thomasadrian/Development/GitHub/taylor-swift-bridge-lyrics-challenge/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from\"react\";import style from\"./style.module.css\";import{animateElement}from\"./utilities\";export default function Word(_ref){var word=_ref.word,toNextWord=_ref.toNextWord,active=_ref.active,index=_ref.index;var inputElement=useRef(null);var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),guess=_useState2[0],setGuess=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),solved=_useState4[0],markSolved=_useState4[1];useEffect(function checkWords(){console.log(guess);if(guess[guess.length-1]===\" \"){setGuess(guess.slice(0,guess.length-1));animateElement(inputElement.current,\"animate-shake\",800);console.log(\"space tried\");}else{if(active==index&&(guess.toLowerCase().replace(/[^a-zA-Z ]/g,\"\")===word.toLowerCase().replace(/[^a-zA-Z ]/g,\"\")||word.toLowerCase().replace(/[^a-zA-Z ]/g,\"\")===\"bout\"&&guess.toLowerCase().replace(/[^a-zA-Z ]/g,\"\")===\"about\")){markSolved(true);toNextWord();}}},[guess,word,toNextWord,active,index]);useEffect(function focusInput(){if(active==index){inputElement.current.focus();}},[active,index]);return/*#__PURE__*/React.createElement(\"div\",{className:style.Word},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:style.blank,disabled:active!=index,style:{color:solved?\"#ffffff\":\"\",borderColor:solved?\"#ffffff\":\"\"},ref:inputElement,onChange:function onChange(event){return setGuess(event.target.value);},value:guess}));}","map":{"version":3,"sources":["/Users/thomasadrian/Development/GitHub/taylor-swift-bridge-lyrics-challenge/src/Word.jsx"],"names":["React","useState","useEffect","useRef","style","animateElement","Word","word","toNextWord","active","index","inputElement","guess","setGuess","solved","markSolved","checkWords","console","log","length","slice","current","toLowerCase","replace","focusInput","focus","blank","color","borderColor","event","target","value"],"mappings":"8JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CAEA,OAASC,cAAT,KAA+B,aAA/B,CAEA,cAAe,SAASC,CAAAA,IAAT,MAAmD,IAAnCC,CAAAA,IAAmC,MAAnCA,IAAmC,CAA7BC,UAA6B,MAA7BA,UAA6B,CAAjBC,MAAiB,MAAjBA,MAAiB,CAATC,KAAS,MAATA,KAAS,CAChE,GAAMC,CAAAA,YAAY,CAAGR,MAAM,CAAC,IAAD,CAA3B,CADgE,cAGtCF,QAAQ,CAAC,EAAD,CAH8B,wCAGzDW,KAHyD,eAGlDC,QAHkD,8BAInCZ,QAAQ,CAAC,KAAD,CAJ2B,yCAIzDa,MAJyD,eAIjDC,UAJiD,eAKhEb,SAAS,CACP,QAASc,CAAAA,UAAT,EAAsB,CACpBC,OAAO,CAACC,GAAR,CAAYN,KAAZ,EACA,GAAIA,KAAK,CAACA,KAAK,CAACO,MAAN,CAAe,CAAhB,CAAL,GAA4B,GAAhC,CAAqC,CACnCN,QAAQ,CAACD,KAAK,CAACQ,KAAN,CAAY,CAAZ,CAAeR,KAAK,CAACO,MAAN,CAAe,CAA9B,CAAD,CAAR,CACAd,cAAc,CAACM,YAAY,CAACU,OAAd,CAAuB,eAAvB,CAAwC,GAAxC,CAAd,CACAJ,OAAO,CAACC,GAAR,CAAY,aAAZ,EACD,CAJD,IAIO,CACL,GACET,MAAM,EAAIC,KAAV,GACCE,KAAK,CAACU,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,CAA2C,EAA3C,IACChB,IAAI,CAACe,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,CAA0C,EAA1C,CADD,EAEEhB,IAAI,CAACe,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,CAA0C,EAA1C,IAAkD,MAAlD,EACCX,KAAK,CAACU,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,CAA2C,EAA3C,IAAmD,OAJvD,CADF,CAME,CACAR,UAAU,CAAC,IAAD,CAAV,CACAP,UAAU,GACX,CACF,CACF,CAnBM,CAoBP,CAACI,KAAD,CAAQL,IAAR,CAAcC,UAAd,CAA0BC,MAA1B,CAAkCC,KAAlC,CApBO,CAAT,CAuBAR,SAAS,CACP,QAASsB,CAAAA,UAAT,EAAsB,CACpB,GAAIf,MAAM,EAAIC,KAAd,CAAqB,CACnBC,YAAY,CAACU,OAAb,CAAqBI,KAArB,GACD,CACF,CALM,CAMP,CAAChB,MAAD,CAASC,KAAT,CANO,CAAT,CASA,mBACE,2BAAK,SAAS,CAAEN,KAAK,CAACE,IAAtB,eACE,6BACE,IAAI,CAAC,MADP,CAEE,SAAS,CAAEF,KAAK,CAACsB,KAFnB,CAGE,QAAQ,CAAEjB,MAAM,EAAIC,KAHtB,CAIE,KAAK,CAAE,CACLiB,KAAK,CAAEb,MAAM,CAAG,SAAH,CAAe,EADvB,CAELc,WAAW,CAAEd,MAAM,CAAG,SAAH,CAAe,EAF7B,CAJT,CAQE,GAAG,CAAEH,YARP,CASE,QAAQ,CAAE,kBAACkB,KAAD,QAAWhB,CAAAA,QAAQ,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB,EATZ,CAUE,KAAK,CAAEnB,KAVT,EADF,CADF,CAgBD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\n\nimport { animateElement } from \"./utilities\";\n\nexport default function Word({ word, toNextWord, active, index }) {\n  const inputElement = useRef(null);\n\n  const [guess, setGuess] = useState(\"\");\n  const [solved, markSolved] = useState(false);\n  useEffect(\n    function checkWords() {\n      console.log(guess);\n      if (guess[guess.length - 1] === \" \") {\n        setGuess(guess.slice(0, guess.length - 1));\n        animateElement(inputElement.current, \"animate-shake\", 800);\n        console.log(\"space tried\");\n      } else {\n        if (\n          active == index &&\n          (guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n            word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ||\n            (word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === \"bout\" &&\n              guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === \"about\"))\n        ) {\n          markSolved(true);\n          toNextWord();\n        }\n      }\n    },\n    [guess, word, toNextWord, active, index]\n  );\n\n  useEffect(\n    function focusInput() {\n      if (active == index) {\n        inputElement.current.focus();\n      }\n    },\n    [active, index]\n  );\n\n  return (\n    <div className={style.Word}>\n      <input\n        type=\"text\"\n        className={style.blank}\n        disabled={active != index}\n        style={{\n          color: solved ? \"#ffffff\" : \"\",\n          borderColor: solved ? \"#ffffff\" : \"\",\n        }}\n        ref={inputElement}\n        onChange={(event) => setGuess(event.target.value)}\n        value={guess}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}