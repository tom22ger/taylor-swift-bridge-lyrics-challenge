{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\nexport default function Question({\n  givenLyrics,\n  missingLyrics\n}) {\n  // Declare a new state variable, which we'll call \"count\"\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(0);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n  const [missingWords, setMissingWords] = useState([]);\n  useEffect(function parseWords() {\n    let words = missingLyrics.split(\" \");\n    let renderedWords = [];\n\n    for (let i in words) {\n      renderedWords.push( /*#__PURE__*/React.createElement(Word, {\n        key: i,\n        word: words[i],\n        toNextWord: toNextWord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    setMissingWords(renderedWords);\n  }, [missingWords, toNextWord, missingLyrics]);\n  useEffect(function solveQuestion() {\n    if (activeWord === missingWords.length) {\n      console.log(\"solved!\");\n    } else {\n      renderedWords.current.childNodes[activeWord].focus();\n    }\n  }, [activeWord]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, props.givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    ref: renderedWords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, missingWords));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","useEffect","useCallback","Word","Question","givenLyrics","missingLyrics","renderedWords","activeWord","setActiveWord","toNextWord","missingWords","setMissingWords","parseWords","words","split","i","push","solveQuestion","length","console","log","current","childNodes","focus","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAlB,EAAkD;AAC/D;AAEA,QAAMC,aAAa,GAAGP,MAAM,CAAC,IAAD,CAA5B;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMW,UAAU,GAAGR,WAAW,CAAC,MAAM;AACnCO,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACD,GAF6B,EAE3B,CAACA,UAAD,CAF2B,CAA9B;AAIA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACAE,EAAAA,SAAS,CACP,SAASY,UAAT,GAAsB;AACpB,QAAIC,KAAK,GAAGR,aAAa,CAACS,KAAd,CAAoB,GAApB,CAAZ;AACA,QAAIR,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIS,CAAT,IAAcF,KAAd,EAAqB;AACnBP,MAAAA,aAAa,CAACU,IAAd,eACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAED,CAAX;AAAc,QAAA,IAAI,EAAEF,KAAK,CAACE,CAAD,CAAzB;AAA8B,QAAA,UAAU,EAAEN,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACDE,IAAAA,eAAe,CAACL,aAAD,CAAf;AACD,GAVM,EAWP,CAACI,YAAD,EAAeD,UAAf,EAA2BJ,aAA3B,CAXO,CAAT;AAcAL,EAAAA,SAAS,CACP,SAASiB,aAAT,GAAyB;AACvB,QAAIV,UAAU,KAAKG,YAAY,CAACQ,MAAhC,EAAwC;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAFD,MAEO;AACLd,MAAAA,aAAa,CAACe,OAAd,CAAsBC,UAAtB,CAAiCf,UAAjC,EAA6CgB,KAA7C;AACD;AACF,GAPM,EAQP,CAAChB,UAAD,CARO,CAAT;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMiB,KAAK,CAACpB,WAAZ,CADF,eAEE;AAAK,IAAA,GAAG,EAAEE,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BI,YAA1B,CAFF,CADF;AAMD","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\n\nexport default function Question({ givenLyrics, missingLyrics }) {\n  // Declare a new state variable, which we'll call \"count\"\n\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(0);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n\n  const [missingWords, setMissingWords] = useState([]);\n  useEffect(\n    function parseWords() {\n      let words = missingLyrics.split(\" \");\n      let renderedWords = [];\n      for (let i in words) {\n        renderedWords.push(\n          <Word key={i} word={words[i]} toNextWord={toNextWord}></Word>\n        );\n      }\n      setMissingWords(renderedWords);\n    },\n    [missingWords, toNextWord, missingLyrics]\n  );\n\n  useEffect(\n    function solveQuestion() {\n      if (activeWord === missingWords.length) {\n        console.log(\"solved!\");\n      } else {\n        renderedWords.current.childNodes[activeWord].focus();\n      }\n    },\n    [activeWord]\n  );\n\n  return (\n    <div>\n      <div>{props.givenLyrics}</div>\n      <div ref={renderedWords}>{missingWords}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}