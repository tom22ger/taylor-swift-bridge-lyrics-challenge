{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\nexport default function Word({\n  word,\n  toNextWord,\n  active,\n  index\n}) {\n  const [guess, setGuess] = useState(\"\");\n  const inputElement = useRef(null);\n  useEffect(function checkWords() {\n    console.log(guess);\n\n    if (guess[guess.length - 1] === \" \") {\n      setGuess(guess.slice(0, guess.length - 1));\n      console.log(\"space tried\");\n    } else {\n      if (active == index && guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")) {\n        toNextWord();\n      }\n    }\n  }, [guess, word, toNextWord, active, index]);\n  useEffect(function focusInput() {\n    if (active == index) {\n      inputElement.current.focus();\n    }\n  }, [active, index]);\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: style.blank,\n    disabled: active != index,\n    ref: inputElement,\n    onChange: event => setGuess(event.target.value),\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useEffect","useRef","style","Word","word","toNextWord","active","index","guess","setGuess","inputElement","checkWords","console","log","length","slice","toLowerCase","replace","focusInput","current","focus","blank","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA;AAA5B,CAAd,EAAmD;AAChE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMW,YAAY,GAAGT,MAAM,CAAC,IAAD,CAA3B;AAEAD,EAAAA,SAAS,CACP,SAASW,UAAT,GAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;;AACA,QAAIA,KAAK,CAACA,KAAK,CAACM,MAAN,GAAe,CAAhB,CAAL,KAA4B,GAAhC,EAAqC;AACnCL,MAAAA,QAAQ,CAACD,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeP,KAAK,CAACM,MAAN,GAAe,CAA9B,CAAD,CAAR;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KAHD,MAGO;AACL,UACEP,MAAM,IAAIC,KAAV,IACAC,KAAK,CAACQ,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C,MACEb,IAAI,CAACY,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,EAA1C,CAHJ,EAIE;AACAZ,QAAAA,UAAU;AACX;AACF;AACF,GAfM,EAgBP,CAACG,KAAD,EAAQJ,IAAR,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,KAAlC,CAhBO,CAAT;AAmBAP,EAAAA,SAAS,CACP,SAASkB,UAAT,GAAsB;AACpB,QAAIZ,MAAM,IAAIC,KAAd,EAAqB;AACnBG,MAAAA,YAAY,CAACS,OAAb,CAAqBC,KAArB;AACD;AACF,GALM,EAMP,CAACd,MAAD,EAASC,KAAT,CANO,CAAT;AASA,sBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAEL,KAAK,CAACmB,KAFnB;AAGE,IAAA,QAAQ,EAAEf,MAAM,IAAIC,KAHtB;AAIE,IAAA,GAAG,EAAEG,YAJP;AAKE,IAAA,QAAQ,EAAGY,KAAD,IAAWb,QAAQ,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAL/B;AAME,IAAA,KAAK,EAAEhB,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\n\nexport default function Word({ word, toNextWord, active, index }) {\n  const [guess, setGuess] = useState(\"\");\n  const inputElement = useRef(null);\n\n  useEffect(\n    function checkWords() {\n      console.log(guess);\n      if (guess[guess.length - 1] === \" \") {\n        setGuess(guess.slice(0, guess.length - 1));\n        console.log(\"space tried\");\n      } else {\n        if (\n          active == index &&\n          guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n            word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n        ) {\n          toNextWord();\n        }\n      }\n    },\n    [guess, word, toNextWord, active, index]\n  );\n\n  useEffect(\n    function focusInput() {\n      if (active == index) {\n        inputElement.current.focus();\n      }\n    },\n    [active, index]\n  );\n\n  return (\n    <input\n      type=\"text\"\n      className={style.blank}\n      disabled={active != index}\n      ref={inputElement}\n      onChange={(event) => setGuess(event.target.value)}\n      value={guess}\n    ></input>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}