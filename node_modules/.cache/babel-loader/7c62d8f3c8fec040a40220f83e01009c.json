{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Quiz.jsx\";\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from \"react\";\nimport Question from \"./Question\";\nimport data from \"./data.json\";\nexport default function Quiz({\n  questions\n}) {\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const skipQuestion = useCallback(() => {\n    setActiveQuestion(activeQuestion + 1);\n  }, [activeQuestion]);\n  const solveQuestion = useCallback(() => {\n    setScore(score + 1);\n    setActiveQuestion(activeQuestion + 1);\n  }, [activeQuestion, score]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, score), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, activeQuestion == data.length || data.map((props, i) => /*#__PURE__*/React.createElement(Question, Object.assign({}, props, {\n    activeQuestion: activeQuestion,\n    index: i,\n    key: i,\n    solve: solveQuestion,\n    skip: skipQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  })))), activeQuestion == data.length && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 41\n    }\n  }, \"Your score was: \", score));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Quiz.jsx"],"names":["React","useState","useRef","useEffect","useCallback","useMemo","Question","data","Quiz","questions","activeQuestion","setActiveQuestion","score","setScore","skipQuestion","solveQuestion","length","map","props","i"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,OALF,QAMO,OANP;AAOA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA6B;AAC1C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AAEA,QAAMa,YAAY,GAAGV,WAAW,CAAC,MAAM;AACrCO,IAAAA,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAjB;AACD,GAF+B,EAE7B,CAACA,cAAD,CAF6B,CAAhC;AAIA,QAAMK,aAAa,GAAGX,WAAW,CAAC,MAAM;AACtCS,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAD,IAAAA,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAjB;AACD,GAHgC,EAG9B,CAACA,cAAD,EAAiBE,KAAjB,CAH8B,CAAjC;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,KAAN,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,cAAc,IAAIH,IAAI,CAACS,MAAvB,IACCT,IAAI,CAACU,GAAL,CAAS,CAACC,KAAD,EAAQC,CAAR,kBACP,oBAAC,QAAD,oBACMD,KADN;AAEE,IAAA,cAAc,EAAER,cAFlB;AAGE,IAAA,KAAK,EAAES,CAHT;AAIE,IAAA,GAAG,EAAEA,CAJP;AAKE,IAAA,KAAK,EAAEJ,aALT;AAME,IAAA,IAAI,EAAED,YANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFJ,CAFF,EAeGJ,cAAc,IAAIH,IAAI,CAACS,MAAvB,iBAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsBJ,KAAtB,CAfpC,CADF;AAmBD","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport Question from \"./Question\";\nimport data from \"./data.json\";\n\nexport default function Quiz({ questions }) {\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const skipQuestion = useCallback(() => {\n    setActiveQuestion(activeQuestion + 1);\n  }, [activeQuestion]);\n\n  const solveQuestion = useCallback(() => {\n    setScore(score + 1);\n    setActiveQuestion(activeQuestion + 1);\n  }, [activeQuestion, score]);\n\n  return (\n    <div>\n      <div>{score}</div>\n      <div>\n        {activeQuestion == data.length ||\n          data.map((props, i) => (\n            <Question\n              {...props}\n              activeQuestion={activeQuestion}\n              index={i}\n              key={i}\n              solve={solveQuestion}\n              skip={skipQuestion}\n            />\n          ))}\n      </div>\n      {activeQuestion == data.length && <div>Your score was: {score}</div>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}