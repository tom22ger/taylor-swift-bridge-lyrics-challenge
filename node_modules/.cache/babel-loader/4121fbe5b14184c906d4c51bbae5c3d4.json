{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nexport default function Word({\n  word,\n  toNextWord,\n  active,\n  index\n}) {\n  const [guess, setGuess] = useState(\"\");\n  const inputElement = useRef(null);\n  useEffect(function focusInput() {\n    inputElement.current.focus();\n  });\n  useEffect(function checkWords() {\n    console.log(guess);\n\n    if (guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")) {\n      toNextWord();\n    } else {}\n  }, [guess, word, toNextWord]);\n  console.log(active);\n  console.log(index);\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    disabled: active != index,\n    ref: inputElement,\n    onChange: event => setGuess(event.target.value),\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useEffect","useRef","Word","word","toNextWord","active","index","guess","setGuess","inputElement","focusInput","current","focus","checkWords","console","log","toLowerCase","replace","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA;AAA5B,CAAd,EAAmD;AAChE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMU,YAAY,GAAGR,MAAM,CAAC,IAAD,CAA3B;AAEAD,EAAAA,SAAS,CAAC,SAASU,UAAT,GAAsB;AAC9BD,IAAAA,YAAY,CAACE,OAAb,CAAqBC,KAArB;AACD,GAFQ,CAAT;AAIAZ,EAAAA,SAAS,CACP,SAASa,UAAT,GAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AACA,QACEA,KAAK,CAACS,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C,MACAd,IAAI,CAACa,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,EAA1C,CAFF,EAGE;AACAb,MAAAA,UAAU;AACX,KALD,MAKO,CACN;AACF,GAVM,EAWP,CAACG,KAAD,EAAQJ,IAAR,EAAcC,UAAd,CAXO,CAAT;AAcAU,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,sBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAED,MAAM,IAAIC,KAFtB;AAGE,IAAA,GAAG,EAAEG,YAHP;AAIE,IAAA,QAAQ,EAAGS,KAAD,IAAWV,QAAQ,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAJ/B;AAKE,IAAA,KAAK,EAAEb,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nexport default function Word({ word, toNextWord, active, index }) {\n  const [guess, setGuess] = useState(\"\");\n  const inputElement = useRef(null);\n\n  useEffect(function focusInput() {\n    inputElement.current.focus();\n  });\n\n  useEffect(\n    function checkWords() {\n      console.log(guess);\n      if (\n        guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n        word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n      ) {\n        toNextWord();\n      } else {\n      }\n    },\n    [guess, word, toNextWord]\n  );\n\n  console.log(active);\n  console.log(index);\n  return (\n    <input\n      type=\"text\"\n      disabled={active != index}\n      ref={inputElement}\n      onChange={(event) => setGuess(event.target.value)}\n      value={guess}\n    ></input>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}