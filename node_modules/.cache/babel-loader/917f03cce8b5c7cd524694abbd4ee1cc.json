{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useRef, useEffect } from \"react\";\nexport default function Word(props) {\n  const [solved, setSolved] = useState(false);\n  const [guess, changeGuess] = useState(\"\");\n  const input = useRef(null);\n\n  function isSameWord(w1, w2) {\n    return w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\");\n  }\n\n  function checkWord() {\n    if (isSameWord(input.current.value, props.word)) {\n      setSolved(true);\n    } else {}\n  }\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    ref: input,\n    type: \"text\",\n    onChange: event => checkWord(event),\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useRef","useEffect","Word","props","solved","setSolved","guess","changeGuess","input","isSameWord","w1","w2","toLowerCase","replace","checkWord","current","value","word","event"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,WAAR,IAAuBR,QAAQ,CAAC,EAAD,CAArC;AAEA,QAAMS,KAAK,GAAGR,MAAM,CAAC,IAAD,CAApB;;AACA,WAASS,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;AAC1B,WACED,EAAE,CAACE,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,MACAF,EAAE,CAACC,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,CAFF;AAID;;AAED,WAASC,SAAT,GAAqB;AACnB,QAAIL,UAAU,CAACD,KAAK,CAACO,OAAN,CAAcC,KAAf,EAAsBb,KAAK,CAACc,IAA5B,CAAd,EAAiD;AAC/CZ,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAFD,MAEO,CACN;AACF;;AAED,sBACE;AACE,IAAA,GAAG,EAAEG,KADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,QAAQ,EAAGU,KAAD,IAAWJ,SAAS,CAACI,KAAD,CAHhC;AAIE,IAAA,KAAK,EAAEZ,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nexport default function Word(props) {\n  const [solved, setSolved] = useState(false);\n  const [guess, changeGuess] = useState(\"\");\n\n  const input = useRef(null);\n  function isSameWord(w1, w2) {\n    return (\n      w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n      w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n    );\n  }\n\n  function checkWord() {\n    if (isSameWord(input.current.value, props.word)) {\n      setSolved(true);\n    } else {\n    }\n  }\n\n  return (\n    <input\n      ref={input}\n      type=\"text\"\n      onChange={(event) => checkWord(event)}\n      value={guess}\n    ></input>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}