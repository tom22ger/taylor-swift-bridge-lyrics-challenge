{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\nexport default function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(0);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord, setActiveWord]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n\n    for (let i in words) {\n      renderedWords.push( /*#__PURE__*/React.createElement(Word, {\n        key: i,\n        word: words[i],\n        toNextWord: toNextWord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return renderedWords;\n  }\n\n  const missingWords = parseWords(props.missingLyrics);\n  useEffect(function solveQuestion() {\n    if (activeWord === missingWords.length) {\n      console.log(\"solved!\");\n    } else {\n      renderedWords.current.childNodes[activeWord].focus();\n    }\n  }, [activeWord]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, props.givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    ref: renderedWords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, missingWords));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","useEffect","useCallback","Word","Question","props","renderedWords","activeWord","setActiveWord","toNextWord","parseWords","sentence","words","split","i","push","missingWords","missingLyrics","solveQuestion","length","console","log","current","childNodes","focus","givenLyrics"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC;AAEA,QAAMC,aAAa,GAAGN,MAAM,CAAC,IAAD,CAA5B;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMU,UAAU,GAAGP,WAAW,CAAC,MAAM;AACnCM,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACD,GAF6B,EAE3B,CAACA,UAAD,EAAaC,aAAb,CAF2B,CAA9B;;AAIA,WAASE,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACA,QAAIP,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIQ,CAAT,IAAcF,KAAd,EAAqB;AACnBN,MAAAA,aAAa,CAACS,IAAd,eACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAED,CAAX;AAAc,QAAA,IAAI,EAAEF,KAAK,CAACE,CAAD,CAAzB;AAA8B,QAAA,UAAU,EAAEL,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,WAAOH,aAAP;AACD;;AACD,QAAMU,YAAY,GAAGN,UAAU,CAACL,KAAK,CAACY,aAAP,CAA/B;AAEAhB,EAAAA,SAAS,CACP,SAASiB,aAAT,GAAyB;AACvB,QAAIX,UAAU,KAAKS,YAAY,CAACG,MAAhC,EAAwC;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAFD,MAEO;AACLf,MAAAA,aAAa,CAACgB,OAAd,CAAsBC,UAAtB,CAAiChB,UAAjC,EAA6CiB,KAA7C;AACD;AACF,GAPM,EAQP,CAACjB,UAAD,CARO,CAAT;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,KAAK,CAACoB,WAAZ,CADF,eAEE;AAAK,IAAA,GAAG,EAAEnB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BU,YAA1B,CAFF,CADF;AAMD","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\n\nexport default function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(0);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord, setActiveWord]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n    for (let i in words) {\n      renderedWords.push(\n        <Word key={i} word={words[i]} toNextWord={toNextWord}></Word>\n      );\n    }\n    return renderedWords;\n  }\n  const missingWords = parseWords(props.missingLyrics);\n\n  useEffect(\n    function solveQuestion() {\n      if (activeWord === missingWords.length) {\n        console.log(\"solved!\");\n      } else {\n        renderedWords.current.childNodes[activeWord].focus();\n      }\n    },\n    [activeWord]\n  );\n\n  return (\n    <div>\n      <div>{props.givenLyrics}</div>\n      <div ref={renderedWords}>{missingWords}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}