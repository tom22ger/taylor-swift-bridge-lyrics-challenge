{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\nimport style from \"./style.module.css\";\nexport default function Question({\n  givenLyrics,\n  missingLyrics,\n  activeQuestion,\n  index,\n  skip,\n  solve\n}) {\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(-1);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n  useEffect(() => {\n    if (activeQuestion == index) {\n      setActiveWord(0);\n    }\n  }, [activeQuestion, index]);\n  const missingWords = missingLyrics.split(\" \").map((word, i) => /*#__PURE__*/React.createElement(Word, {\n    key: i,\n    index: i,\n    word: word,\n    toNextWord: toNextWord,\n    active: activeWord,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }));\n  const [solved, markSolved] = useState(false);\n  useEffect(function solveQuestion() {\n    if (!solved && activeWord === missingWords.length) {\n      console.log(\"solved\");\n      markSolved(true);\n    }\n  }, [activeWord, missingWords.length, solve, solved]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: style.Question,\n    style: {\n      display: activeQuestion == index ? \"inline-block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    ref: renderedWords,\n    className: style.words,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, missingWords), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"next-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      display: solved ? \"none\" : \"block\"\n    },\n    onClick: skip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"SKIP\"), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      display: solved ? \"block\" : \"none\"\n    },\n    onClick: solve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"NEXT\")));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","useEffect","useCallback","Word","style","Question","givenLyrics","missingLyrics","activeQuestion","index","skip","solve","renderedWords","activeWord","setActiveWord","toNextWord","missingWords","split","map","word","i","solved","markSolved","solveQuestion","length","console","log","display","words"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\nimport style from \"./style.module.css\";\n\nexport default function Question({\n  givenLyrics,\n  missingLyrics,\n  activeQuestion,\n  index,\n  skip,\n  solve,\n}) {\n  const renderedWords = useRef(null);\n\n  const [activeWord, setActiveWord] = useState(-1);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n\n  useEffect(() => {\n    if (activeQuestion == index) {\n      setActiveWord(0);\n    }\n  }, [activeQuestion, index]);\n\n  const missingWords = missingLyrics\n    .split(\" \")\n    .map((word, i) => (\n      <Word\n        key={i}\n        index={i}\n        word={word}\n        toNextWord={toNextWord}\n        active={activeWord}\n      ></Word>\n    ));\n\n  const [solved, markSolved] = useState(false);\n  useEffect(\n    function solveQuestion() {\n      if (!solved && activeWord === missingWords.length) {\n        console.log(\"solved\");\n        markSolved(true);\n      }\n    },\n    [activeWord, missingWords.length, solve, solved]\n  );\n\n  return (\n    <div\n      className={style.Question}\n      style={{ display: activeQuestion == index ? \"inline-block\" : \"none\" }}\n    >\n      <div>{givenLyrics}</div>\n      <div ref={renderedWords} className={style.words}>\n        {missingWords}\n      </div>\n      <div className={\"next-buttons\"}>\n        <button style={{ display: solved ? \"none\" : \"block\" }} onClick={skip}>\n          SKIP\n        </button>\n        <button style={{ display: solved ? \"block\" : \"none\" }} onClick={solve}>\n          NEXT\n        </button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}