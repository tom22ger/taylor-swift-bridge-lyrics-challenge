{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useRef } from \"react\";\nexport default function Word(props) {\n  const [solved, setSolved] = useState(false);\n\n  function isSameWord(w1, w2) {\n    return w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\");\n  }\n\n  const input = useRef(null);\n\n  function checkWord() {\n    if (isSameWord(input.value, props.word)) {\n      setSolved(true);\n    } else {}\n  }\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    ref: input,\n    type: \"text\",\n    onInput: checkWord(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useRef","Word","props","solved","setSolved","isSameWord","w1","w2","toLowerCase","replace","input","checkWord","value","word"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;;AAEA,WAASM,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;AAC1B,WACED,EAAE,CAACE,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,MACAF,EAAE,CAACC,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,CAFF;AAID;;AACD,QAAMC,KAAK,GAAGV,MAAM,CAAC,IAAD,CAApB;;AAEA,WAASW,SAAT,GAAqB;AACnB,QAAIN,UAAU,CAACK,KAAK,CAACE,KAAP,EAAcV,KAAK,CAACW,IAApB,CAAd,EAAyC;AACvCT,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAFD,MAEO,CACN;AACF;;AAED,sBAAO;AAAO,IAAA,GAAG,EAAEM,KAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,OAAO,EAAEC,SAAS,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nexport default function Word(props) {\n  const [solved, setSolved] = useState(false);\n\n  function isSameWord(w1, w2) {\n    return (\n      w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n      w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n    );\n  }\n  const input = useRef(null);\n\n  function checkWord() {\n    if (isSameWord(input.value, props.word)) {\n      setSolved(true);\n    } else {\n    }\n  }\n\n  return <input ref={input} type=\"text\" onInput={checkWord()}></input>;\n}\n"]},"metadata":{},"sourceType":"module"}