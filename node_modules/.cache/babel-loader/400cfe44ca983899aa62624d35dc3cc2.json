{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Word from \"./Word\";\nexport default function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [activeWord, setActiveWord] = useState(0);\n  const renderedWords = useRef(null);\n\n  function solveQuestion() {\n    return;\n  }\n\n  function toNextWord() {\n    setActiveWord(activeWord + 1);\n\n    if (activeWord === missingWords.length) {\n      solveQuestion();\n    } else {}\n  }\n\n  useEffect(() => {\n    renderedWords.current.childNodes[activeWord].focus();\n  }, [activeWord]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n\n    for (let i in words) {\n      renderedWords.push( /*#__PURE__*/React.createElement(Word, {\n        key: i,\n        word: words[i],\n        toNextWord: toNextWord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return renderedWords;\n  }\n\n  const missingWords = parseWords(props.missingLyrics);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, props.givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    ref: renderedWords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, missingWords));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","useEffect","Word","Question","props","activeWord","setActiveWord","renderedWords","solveQuestion","toNextWord","missingWords","length","current","childNodes","focus","parseWords","sentence","words","split","i","push","missingLyrics","givenLyrics"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMQ,aAAa,GAAGP,MAAM,CAAC,IAAD,CAA5B;;AAEA,WAASQ,aAAT,GAAyB;AACvB;AACD;;AAED,WAASC,UAAT,GAAsB;AACpBH,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;;AACA,QAAIA,UAAU,KAAKK,YAAY,CAACC,MAAhC,EAAwC;AACtCH,MAAAA,aAAa;AACd,KAFD,MAEO,CACN;AACF;;AACDP,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,aAAa,CAACK,OAAd,CAAsBC,UAAtB,CAAiCR,UAAjC,EAA6CS,KAA7C;AACD,GAFQ,EAEN,CAACT,UAAD,CAFM,CAAT;;AAIA,WAASU,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACA,QAAIX,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIY,CAAT,IAAcF,KAAd,EAAqB;AACnBV,MAAAA,aAAa,CAACa,IAAd,eACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAED,CAAX;AAAc,QAAA,IAAI,EAAEF,KAAK,CAACE,CAAD,CAAzB;AAA8B,QAAA,UAAU,EAAEV,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,WAAOF,aAAP;AACD;;AACD,QAAMG,YAAY,GAAGK,UAAU,CAACX,KAAK,CAACiB,aAAP,CAA/B;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMjB,KAAK,CAACkB,WAAZ,CADF,eAEE;AAAK,IAAA,GAAG,EAAEf,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BG,YAA1B,CAFF,CADF;AAMD","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport Word from \"./Word\";\n\nexport default function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [activeWord, setActiveWord] = useState(0);\n  const renderedWords = useRef(null);\n\n  function solveQuestion() {\n    return;\n  }\n\n  function toNextWord() {\n    setActiveWord(activeWord + 1);\n    if (activeWord === missingWords.length) {\n      solveQuestion();\n    } else {\n    }\n  }\n  useEffect(() => {\n    renderedWords.current.childNodes[activeWord].focus();\n  }, [activeWord]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n    for (let i in words) {\n      renderedWords.push(\n        <Word key={i} word={words[i]} toNextWord={toNextWord}></Word>\n      );\n    }\n    return renderedWords;\n  }\n  const missingWords = parseWords(props.missingLyrics);\n\n  return (\n    <div>\n      <div>{props.givenLyrics}</div>\n      <div ref={renderedWords}>{missingWords}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}