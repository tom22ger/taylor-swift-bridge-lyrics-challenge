{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef } from \"react\";\nexport function Word(props) {\n  const [solved, setSolved] = useState(false);\n\n  function isSameWord(w1, w2) {\n    return w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\");\n  }\n\n  const input = useRef();\n\n  function checkWord() {\n    if (isSameWord(input.value, props.word)) {\n      setSolved(true);\n    } else {}\n  }\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    ref: input,\n    type: \"text\",\n    onInput: checkWord(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  });\n}\nexport function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n  const [missingWords, setMissingWords] = useState([]);\n  const [activeWord, setActiveWord] = useState(null);\n\n  function nextWord() {\n    let activeWord = document.activeElement;\n  }\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n\n    for (let i in words) {\n      renderedWords.push( /*#__PURE__*/React.createElement(\"input\", {\n        key: i,\n        type: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, words[i]));\n    }\n\n    return renderedWords;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, props.givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, parseWords(props.missingLyrics)));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","Word","props","solved","setSolved","isSameWord","w1","w2","toLowerCase","replace","input","checkWord","value","word","Question","count","setCount","missingWords","setMissingWords","activeWord","setActiveWord","nextWord","document","activeElement","parseWords","sentence","words","split","renderedWords","i","push","givenLyrics","missingLyrics"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;;AAEA,WAASM,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;AAC1B,WACED,EAAE,CAACE,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,MACAF,EAAE,CAACC,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,CAFF;AAID;;AACD,QAAMC,KAAK,GAAGV,MAAM,EAApB;;AAEA,WAASW,SAAT,GAAqB;AACnB,QAAIN,UAAU,CAACK,KAAK,CAACE,KAAP,EAAcV,KAAK,CAACW,IAApB,CAAd,EAAyC;AACvCT,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAFD,MAEO,CACN;AACF;;AAED,sBAAO;AAAO,IAAA,GAAG,EAAEM,KAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,OAAO,EAAEC,SAAS,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;AAED,OAAO,SAASG,QAAT,CAAkBZ,KAAlB,EAAyB;AAC9B;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,IAAD,CAA5C;;AAEA,WAASsB,QAAT,GAAoB;AAClB,QAAIF,UAAU,GAAGG,QAAQ,CAACC,aAA1B;AACD;;AAED,WAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACA,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIC,CAAT,IAAcH,KAAd,EAAqB;AACnBE,MAAAA,aAAa,CAACE,IAAd,eACE;AAAO,QAAA,GAAG,EAAED,CAAZ;AAAe,QAAA,IAAI,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,KAAK,CAACG,CAAD,CADR,CADF;AAKD;;AACD,WAAOD,aAAP;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM1B,KAAK,CAAC6B,WAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMP,UAAU,CAACtB,KAAK,CAAC8B,aAAP,CAAhB,CAFF,CADF;AAMD","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nexport function Word(props) {\n  const [solved, setSolved] = useState(false);\n\n  function isSameWord(w1, w2) {\n    return (\n      w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n      w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n    );\n  }\n  const input = useRef();\n\n  function checkWord() {\n    if (isSameWord(input.value, props.word)) {\n      setSolved(true);\n    } else {\n    }\n  }\n\n  return <input ref={input} type=\"text\" onInput={checkWord()}></input>;\n}\n\nexport function Question(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n  const [missingWords, setMissingWords] = useState([]);\n  const [activeWord, setActiveWord] = useState(null);\n\n  function nextWord() {\n    let activeWord = document.activeElement;\n  }\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n    for (let i in words) {\n      renderedWords.push(\n        <input key={i} type=\"text\">\n          {words[i]}\n        </input>\n      );\n    }\n    return renderedWords;\n  }\n\n  return (\n    <div>\n      <div>{props.givenLyrics}</div>\n      <div>{parseWords(props.missingLyrics)}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}