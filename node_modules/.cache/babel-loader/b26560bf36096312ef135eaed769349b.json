{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\n\nElement.prototype.animate = function (cl, length = 1000) {\n  inputElement.current.classList.add(cl);\n  setTimeout(() => inputElement.current.classList.remove(cl), length);\n};\n\nexport default function Word({\n  word,\n  toNextWord,\n  active,\n  index\n}) {\n  const inputElement = useRef(null); // function animate(el, cl, length) {\n  //   inputElement.current.classList.add(cl);\n  //   setTimeout(() => inputElement.current.classList.remove(cl), length);\n  // }\n\n  const [guess, setGuess] = useState(\"\");\n  const [solved, markSolved] = useState(false);\n  useEffect(function checkWords() {\n    console.log(guess);\n\n    if (guess[guess.length - 1] === \" \") {\n      setGuess(guess.slice(0, guess.length - 1));\n      console.log(\"space tried\"); // if (inputElement.current.style.animationName !== \"shake\") {\n      //   inputElement.current.style.animationName = \"shake\";\n      //   inputElement.current.style.aimationDuration = \"1s\";\n      //   // make sure to reset the name after 4 seconds, otherwise another call to colorchange wont have any effect\n      //   setTimeout(function () {\n      //     inputElement.current.style.animationName = \"\";\n      //   }, 1000);\n      // }\n      // inputElement.current.animate(\n      //   [\n      //     // keyframes\n      //     { transform: \"translateY(0px)\" },\n      //     { transform: \"translateY(-300px)\" },\n      //   ],\n      //   {\n      //     // timing options\n      //     duration: 1000,\n      //   }\n      // );\n    } else {\n      if (active == index && guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")) {\n        markSolved(true);\n        toNextWord();\n      }\n    }\n  }, [guess, word, toNextWord, active, index]);\n  useEffect(function focusInput() {\n    if (active == index) {\n      inputElement.current.focus();\n    }\n  }, [active, index]);\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: style.blank,\n    disabled: active != index,\n    style: {\n      color: solved ? \"green\" : \"\",\n      borderColor: solved ? \"green\" : \"\"\n    },\n    ref: inputElement,\n    onChange: event => setGuess(event.target.value),\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useEffect","useRef","style","Element","prototype","animate","cl","length","inputElement","current","classList","add","setTimeout","remove","Word","word","toNextWord","active","index","guess","setGuess","solved","markSolved","checkWords","console","log","slice","toLowerCase","replace","focusInput","focus","blank","color","borderColor","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEAC,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4B,UAAUC,EAAV,EAAcC,MAAM,GAAG,IAAvB,EAA6B;AACvDC,EAAAA,YAAY,CAACC,OAAb,CAAqBC,SAArB,CAA+BC,GAA/B,CAAmCL,EAAnC;AACAM,EAAAA,UAAU,CAAC,MAAMJ,YAAY,CAACC,OAAb,CAAqBC,SAArB,CAA+BG,MAA/B,CAAsCP,EAAtC,CAAP,EAAkDC,MAAlD,CAAV;AACD,CAHD;;AAKA,eAAe,SAASO,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA;AAA5B,CAAd,EAAmD;AAChE,QAAMV,YAAY,GAAGP,MAAM,CAAC,IAAD,CAA3B,CADgE,CAGhE;AACA;AACA;AACA;;AAEA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACsB,MAAD,EAASC,UAAT,IAAuBvB,QAAQ,CAAC,KAAD,CAArC;AACAC,EAAAA,SAAS,CACP,SAASuB,UAAT,GAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AACA,QAAIA,KAAK,CAACA,KAAK,CAACZ,MAAN,GAAe,CAAhB,CAAL,KAA4B,GAAhC,EAAqC;AACnCa,MAAAA,QAAQ,CAACD,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeP,KAAK,CAACZ,MAAN,GAAe,CAA9B,CAAD,CAAR;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAFmC,CAInC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAzBD,MAyBO;AACL,UACER,MAAM,IAAIC,KAAV,IACAC,KAAK,CAACQ,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C,MACEb,IAAI,CAACY,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,EAA1C,CAHJ,EAIE;AACAN,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,QAAAA,UAAU;AACX;AACF;AACF,GAtCM,EAuCP,CAACG,KAAD,EAAQJ,IAAR,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,KAAlC,CAvCO,CAAT;AA0CAlB,EAAAA,SAAS,CACP,SAAS6B,UAAT,GAAsB;AACpB,QAAIZ,MAAM,IAAIC,KAAd,EAAqB;AACnBV,MAAAA,YAAY,CAACC,OAAb,CAAqBqB,KAArB;AACD;AACF,GALM,EAMP,CAACb,MAAD,EAASC,KAAT,CANO,CAAT;AASA,sBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAEhB,KAAK,CAAC6B,KAFnB;AAGE,IAAA,QAAQ,EAAEd,MAAM,IAAIC,KAHtB;AAIE,IAAA,KAAK,EAAE;AACLc,MAAAA,KAAK,EAAEX,MAAM,GAAG,OAAH,GAAa,EADrB;AAELY,MAAAA,WAAW,EAAEZ,MAAM,GAAG,OAAH,GAAa;AAF3B,KAJT;AAQE,IAAA,GAAG,EAAEb,YARP;AASE,IAAA,QAAQ,EAAG0B,KAAD,IAAWd,QAAQ,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAT/B;AAUE,IAAA,KAAK,EAAEjB,KAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\n\nElement.prototype.animate = function (cl, length = 1000) {\n  inputElement.current.classList.add(cl);\n  setTimeout(() => inputElement.current.classList.remove(cl), length);\n};\n\nexport default function Word({ word, toNextWord, active, index }) {\n  const inputElement = useRef(null);\n\n  // function animate(el, cl, length) {\n  //   inputElement.current.classList.add(cl);\n  //   setTimeout(() => inputElement.current.classList.remove(cl), length);\n  // }\n\n  const [guess, setGuess] = useState(\"\");\n  const [solved, markSolved] = useState(false);\n  useEffect(\n    function checkWords() {\n      console.log(guess);\n      if (guess[guess.length - 1] === \" \") {\n        setGuess(guess.slice(0, guess.length - 1));\n        console.log(\"space tried\");\n\n        // if (inputElement.current.style.animationName !== \"shake\") {\n        //   inputElement.current.style.animationName = \"shake\";\n        //   inputElement.current.style.aimationDuration = \"1s\";\n\n        //   // make sure to reset the name after 4 seconds, otherwise another call to colorchange wont have any effect\n        //   setTimeout(function () {\n        //     inputElement.current.style.animationName = \"\";\n        //   }, 1000);\n        // }\n\n        // inputElement.current.animate(\n        //   [\n        //     // keyframes\n        //     { transform: \"translateY(0px)\" },\n        //     { transform: \"translateY(-300px)\" },\n        //   ],\n        //   {\n        //     // timing options\n        //     duration: 1000,\n        //   }\n        // );\n      } else {\n        if (\n          active == index &&\n          guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n            word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n        ) {\n          markSolved(true);\n          toNextWord();\n        }\n      }\n    },\n    [guess, word, toNextWord, active, index]\n  );\n\n  useEffect(\n    function focusInput() {\n      if (active == index) {\n        inputElement.current.focus();\n      }\n    },\n    [active, index]\n  );\n\n  return (\n    <input\n      type=\"text\"\n      className={style.blank}\n      disabled={active != index}\n      style={{\n        color: solved ? \"green\" : \"\",\n        borderColor: solved ? \"green\" : \"\",\n      }}\n      ref={inputElement}\n      onChange={(event) => setGuess(event.target.value)}\n      value={guess}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}