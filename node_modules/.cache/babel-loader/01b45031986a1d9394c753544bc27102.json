{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nexport default function Word({\n  word,\n  toNextWord,\n  active,\n  index\n}) {\n  const [guess, setGuess] = useState(\"\");\n  const inputElement = useRef(null);\n  useEffect(function checkWords() {\n    console.log(guess);\n\n    if (guess[guess.length - 1] == \" \") {\n      setGuess(guess.pop());\n    }\n\n    if (active == index && guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")) {\n      toNextWord();\n    }\n  }, [guess, word, toNextWord]);\n  useEffect(function focusInput() {\n    if (active == index) {\n      inputElement.current.focus();\n    }\n  }, [active, index]);\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    disabled: active != index,\n    ref: inputElement,\n    onChange: event => setGuess(event.target.value),\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useEffect","useRef","Word","word","toNextWord","active","index","guess","setGuess","inputElement","checkWords","console","log","length","pop","toLowerCase","replace","focusInput","current","focus","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA;AAA5B,CAAd,EAAmD;AAChE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMU,YAAY,GAAGR,MAAM,CAAC,IAAD,CAA3B;AAEAD,EAAAA,SAAS,CACP,SAASU,UAAT,GAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;;AACA,QAAIA,KAAK,CAACA,KAAK,CAACM,MAAN,GAAe,CAAhB,CAAL,IAA2B,GAA/B,EAAoC;AAClCL,MAAAA,QAAQ,CAACD,KAAK,CAACO,GAAN,EAAD,CAAR;AACD;;AACD,QACET,MAAM,IAAIC,KAAV,IACAC,KAAK,CAACQ,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C,MACEb,IAAI,CAACY,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,EAA1C,CAHJ,EAIE;AACAZ,MAAAA,UAAU;AACX;AACF,GAbM,EAcP,CAACG,KAAD,EAAQJ,IAAR,EAAcC,UAAd,CAdO,CAAT;AAiBAJ,EAAAA,SAAS,CACP,SAASiB,UAAT,GAAsB;AACpB,QAAIZ,MAAM,IAAIC,KAAd,EAAqB;AACnBG,MAAAA,YAAY,CAACS,OAAb,CAAqBC,KAArB;AACD;AACF,GALM,EAMP,CAACd,MAAD,EAASC,KAAT,CANO,CAAT;AASA,sBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAED,MAAM,IAAIC,KAFtB;AAGE,IAAA,GAAG,EAAEG,YAHP;AAIE,IAAA,QAAQ,EAAGW,KAAD,IAAWZ,QAAQ,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAJ/B;AAKE,IAAA,KAAK,EAAEf,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nexport default function Word({ word, toNextWord, active, index }) {\n  const [guess, setGuess] = useState(\"\");\n  const inputElement = useRef(null);\n\n  useEffect(\n    function checkWords() {\n      console.log(guess);\n      if (guess[guess.length - 1] == \" \") {\n        setGuess(guess.pop());\n      }\n      if (\n        active == index &&\n        guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n          word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n      ) {\n        toNextWord();\n      }\n    },\n    [guess, word, toNextWord]\n  );\n\n  useEffect(\n    function focusInput() {\n      if (active == index) {\n        inputElement.current.focus();\n      }\n    },\n    [active, index]\n  );\n\n  return (\n    <input\n      type=\"text\"\n      disabled={active != index}\n      ref={inputElement}\n      onChange={(event) => setGuess(event.target.value)}\n      value={guess}\n    ></input>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}