{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\nexport default function Word({\n  word,\n  toNextWord,\n  active,\n  index\n}) {\n  const inputElement = useRef(null);\n\n  function flashClass(element, cl) {\n    element.classList.toggle(cl);\n    element.classList.toggle(cl);\n  }\n\n  const [guess, setGuess] = useState(\"\");\n  const [solved, markSolved] = useState(false);\n  useEffect(function checkWords() {\n    console.log(guess);\n\n    if (guess[guess.length - 1] === \" \") {\n      setGuess(guess.slice(0, guess.length - 1));\n      console.log(\"space tried\");\n      flashClass(inputElement.current, \"shake\"); // inputElement.animate(\n      //   [\n      //     // keyframes\n      //     { transform: \"translateY(0px)\" },\n      //     { transform: \"translateY(-300px)\" },\n      //   ],\n      //   {\n      //     // timing options\n      //     duration: 1000,\n      //     iterations: Infinity,\n      //   }\n      // );\n    } else {\n      if (active == index && guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")) {\n        markSolved(true);\n        toNextWord();\n      }\n    }\n  }, [guess, word, toNextWord, active, index]);\n  useEffect(function focusInput() {\n    if (active == index) {\n      inputElement.current.focus();\n    }\n  }, [active, index]);\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: style.blank,\n    disabled: active != index,\n    style: {\n      color: solved ? \"green\" : \"white\",\n      borderColor: solved ? \"green\" : \"white\"\n    },\n    ref: inputElement,\n    onChange: event => setGuess(event.target.value),\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useEffect","useRef","style","Word","word","toNextWord","active","index","inputElement","flashClass","element","cl","classList","toggle","guess","setGuess","solved","markSolved","checkWords","console","log","length","slice","current","toLowerCase","replace","focusInput","focus","blank","color","borderColor","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA;AAA5B,CAAd,EAAmD;AAChE,QAAMC,YAAY,GAAGP,MAAM,CAAC,IAAD,CAA3B;;AAEA,WAASQ,UAAT,CAAoBC,OAApB,EAA6BC,EAA7B,EAAiC;AAC/BD,IAAAA,OAAO,CAACE,SAAR,CAAkBC,MAAlB,CAAyBF,EAAzB;AACAD,IAAAA,OAAO,CAACE,SAAR,CAAkBC,MAAlB,CAAyBF,EAAzB;AACD;;AAED,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACiB,MAAD,EAASC,UAAT,IAAuBlB,QAAQ,CAAC,KAAD,CAArC;AAEAC,EAAAA,SAAS,CACP,SAASkB,UAAT,GAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AACA,QAAIA,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAAL,KAA4B,GAAhC,EAAqC;AACnCN,MAAAA,QAAQ,CAACD,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeR,KAAK,CAACO,MAAN,GAAe,CAA9B,CAAD,CAAR;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAX,MAAAA,UAAU,CAACD,YAAY,CAACe,OAAd,EAAuB,OAAvB,CAAV,CAHmC,CAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAhBD,MAgBO;AACL,UACEjB,MAAM,IAAIC,KAAV,IACAO,KAAK,CAACU,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C,MACErB,IAAI,CAACoB,WAAL,GAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,EAA1C,CAHJ,EAIE;AACAR,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAZ,QAAAA,UAAU;AACX;AACF;AACF,GA7BM,EA8BP,CAACS,KAAD,EAAQV,IAAR,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,KAAlC,CA9BO,CAAT;AAiCAP,EAAAA,SAAS,CACP,SAAS0B,UAAT,GAAsB;AACpB,QAAIpB,MAAM,IAAIC,KAAd,EAAqB;AACnBC,MAAAA,YAAY,CAACe,OAAb,CAAqBI,KAArB;AACD;AACF,GALM,EAMP,CAACrB,MAAD,EAASC,KAAT,CANO,CAAT;AASA,sBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAEL,KAAK,CAAC0B,KAFnB;AAGE,IAAA,QAAQ,EAAEtB,MAAM,IAAIC,KAHtB;AAIE,IAAA,KAAK,EAAE;AACLsB,MAAAA,KAAK,EAAEb,MAAM,GAAG,OAAH,GAAa,OADrB;AAELc,MAAAA,WAAW,EAAEd,MAAM,GAAG,OAAH,GAAa;AAF3B,KAJT;AAQE,IAAA,GAAG,EAAER,YARP;AASE,IAAA,QAAQ,EAAGuB,KAAD,IAAWhB,QAAQ,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAT/B;AAUE,IAAA,KAAK,EAAEnB,KAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport style from \"./style.module.css\";\n\nexport default function Word({ word, toNextWord, active, index }) {\n  const inputElement = useRef(null);\n\n  function flashClass(element, cl) {\n    element.classList.toggle(cl);\n    element.classList.toggle(cl);\n  }\n\n  const [guess, setGuess] = useState(\"\");\n  const [solved, markSolved] = useState(false);\n\n  useEffect(\n    function checkWords() {\n      console.log(guess);\n      if (guess[guess.length - 1] === \" \") {\n        setGuess(guess.slice(0, guess.length - 1));\n        console.log(\"space tried\");\n        flashClass(inputElement.current, \"shake\");\n        // inputElement.animate(\n        //   [\n        //     // keyframes\n        //     { transform: \"translateY(0px)\" },\n        //     { transform: \"translateY(-300px)\" },\n        //   ],\n        //   {\n        //     // timing options\n        //     duration: 1000,\n        //     iterations: Infinity,\n        //   }\n        // );\n      } else {\n        if (\n          active == index &&\n          guess.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n            word.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n        ) {\n          markSolved(true);\n          toNextWord();\n        }\n      }\n    },\n    [guess, word, toNextWord, active, index]\n  );\n\n  useEffect(\n    function focusInput() {\n      if (active == index) {\n        inputElement.current.focus();\n      }\n    },\n    [active, index]\n  );\n\n  return (\n    <input\n      type=\"text\"\n      className={style.blank}\n      disabled={active != index}\n      style={{\n        color: solved ? \"green\" : \"white\",\n        borderColor: solved ? \"green\" : \"white\",\n      }}\n      ref={inputElement}\n      onChange={(event) => setGuess(event.target.value)}\n      value={guess}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}