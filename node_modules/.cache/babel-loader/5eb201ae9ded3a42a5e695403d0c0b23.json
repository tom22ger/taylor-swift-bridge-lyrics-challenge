{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from \"react\";\nimport Word from \"./Word\";\nexport default function Question(props) {\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(0);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n\n    for (let i in words) {\n      renderedWords.push( /*#__PURE__*/React.createElement(Word, {\n        key: i,\n        index: i,\n        word: words[i],\n        toNextWord: toNextWord,\n        active: activeWord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return renderedWords;\n  }\n\n  const missingWords = parseWords(props.missingLyrics);\n  const [solved, setSolved] = useState(false);\n  useEffect(function solveQuestion() {\n    if (activeWord === missingWords.length) {\n      setSolved(true);\n    }\n  }, [activeWord, missingWords.length]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, props.givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    ref: renderedWords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, missingWords));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","useEffect","useCallback","useMemo","Word","Question","props","renderedWords","activeWord","setActiveWord","toNextWord","parseWords","sentence","words","split","i","push","missingWords","missingLyrics","solved","setSolved","solveQuestion","length","givenLyrics"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,OALF,QAMO,OANP;AAOA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,QAAMC,aAAa,GAAGP,MAAM,CAAC,IAAD,CAA5B;AAEA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMW,UAAU,GAAGR,WAAW,CAAC,MAAM;AACnCO,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACD,GAF6B,EAE3B,CAACA,UAAD,CAF2B,CAA9B;;AAIA,WAASG,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACA,QAAIP,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIQ,CAAT,IAAcF,KAAd,EAAqB;AACnBN,MAAAA,aAAa,CAACS,IAAd,eACE,oBAAC,IAAD;AACE,QAAA,GAAG,EAAED,CADP;AAEE,QAAA,KAAK,EAAEA,CAFT;AAGE,QAAA,IAAI,EAAEF,KAAK,CAACE,CAAD,CAHb;AAIE,QAAA,UAAU,EAAEL,UAJd;AAKE,QAAA,MAAM,EAAEF,UALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;AACD,WAAOD,aAAP;AACD;;AACD,QAAMU,YAAY,GAAGN,UAAU,CAACL,KAAK,CAACY,aAAP,CAA/B;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,KAAD,CAApC;AACAE,EAAAA,SAAS,CACP,SAASoB,aAAT,GAAyB;AACvB,QAAIb,UAAU,KAAKS,YAAY,CAACK,MAAhC,EAAwC;AACtCF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GALM,EAMP,CAACZ,UAAD,EAAaS,YAAY,CAACK,MAA1B,CANO,CAAT;AASA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMhB,KAAK,CAACiB,WAAZ,CADF,eAEE;AAAK,IAAA,GAAG,EAAEhB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BU,YAA1B,CAFF,CADF;AAMD","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport Word from \"./Word\";\n\nexport default function Question(props) {\n  const renderedWords = useRef(null);\n\n  const [activeWord, setActiveWord] = useState(0);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = [];\n    for (let i in words) {\n      renderedWords.push(\n        <Word\n          key={i}\n          index={i}\n          word={words[i]}\n          toNextWord={toNextWord}\n          active={activeWord}\n        ></Word>\n      );\n    }\n    return renderedWords;\n  }\n  const missingWords = parseWords(props.missingLyrics);\n\n  const [solved, setSolved] = useState(false);\n  useEffect(\n    function solveQuestion() {\n      if (activeWord === missingWords.length) {\n        setSolved(true);\n      }\n    },\n    [activeWord, missingWords.length]\n  );\n\n  return (\n    <div>\n      <div>{props.givenLyrics}</div>\n      <div ref={renderedWords}>{missingWords}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}