{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx\";\nimport React, { useState, useRef, useEffect } from \"react\";\nexport default function Word(props) {\n  const [solved, setSolved] = useState(false);\n  const [guess, setGuess] = useState(\"\");\n\n  function isSameWord(w1, w2) {\n    return w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") === w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\");\n  }\n\n  useEffect(() => {\n    console.log(guess);\n\n    if (isSameWord(guess, props.word)) {\n      setSolved(true);\n      console.log(solved);\n    } else {}\n  });\n\n  function checkWord(event) {\n    setGuess(event.target.value);\n  }\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: checkWord,\n    value: guess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Word.jsx"],"names":["React","useState","useRef","useEffect","Word","props","solved","setSolved","guess","setGuess","isSameWord","w1","w2","toLowerCase","replace","console","log","word","checkWord","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;;AAEA,WAASS,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;AAC1B,WACED,EAAE,CAACE,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,MACAF,EAAE,CAACC,WAAH,GAAiBC,OAAjB,CAAyB,aAAzB,EAAwC,EAAxC,CAFF;AAID;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AACA,QAAIE,UAAU,CAACF,KAAD,EAAQH,KAAK,CAACY,IAAd,CAAd,EAAmC;AACjCV,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACD,KAHD,MAGO,CACN;AACF,GAPQ,CAAT;;AASA,WAASY,SAAT,CAAmBC,KAAnB,EAA0B;AACxBV,IAAAA,QAAQ,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD;;AAED,sBAAO;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAEH,SAA7B;AAAwC,IAAA,KAAK,EAAEV,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nexport default function Word(props) {\n  const [solved, setSolved] = useState(false);\n  const [guess, setGuess] = useState(\"\");\n\n  function isSameWord(w1, w2) {\n    return (\n      w1.toLowerCase().replace(/[^a-zA-Z ]/g, \"\") ===\n      w2.toLowerCase().replace(/[^a-zA-Z ]/g, \"\")\n    );\n  }\n\n  useEffect(() => {\n    console.log(guess);\n    if (isSameWord(guess, props.word)) {\n      setSolved(true);\n      console.log(solved);\n    } else {\n    }\n  });\n\n  function checkWord(event) {\n    setGuess(event.target.value);\n  }\n\n  return <input type=\"text\" onChange={checkWord} value={guess}></input>;\n}\n"]},"metadata":{},"sourceType":"module"}