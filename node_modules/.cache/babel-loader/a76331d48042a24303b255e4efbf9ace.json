{"ast":null,"code":"var _jsxFileName = \"/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\nimport style from \"./style.module.css\";\nexport default function Question({\n  givenLyrics,\n  missingLyrics,\n  activeQuestion,\n  index,\n  skip,\n  solve\n}) {\n  const renderedWords = useRef(null);\n  const [activeWord, setActiveWord] = useState(-1);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n  useEffect(() => {\n    if (activeQuestion == index) {\n      setActiveWord(0);\n    }\n  }, [activeQuestion, index]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = words.map((word, i) => {\n      /*#__PURE__*/\n      React.createElement(Word, {\n        key: i,\n        index: i,\n        word: word,\n        toNextWord: toNextWord,\n        active: activeWord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      });\n    });\n\n    for (let i in words) {\n      renderedWords.push();\n    }\n\n    return renderedWords;\n  }\n\n  const missingWords = parseWords(missingLyrics);\n  const [solved, markSolved] = useState(false);\n  useEffect(function solveQuestion() {\n    if (!solved && activeWord === missingWords.length) {\n      console.log(\"solved\");\n      markSolved(true);\n    }\n  }, [activeWord, missingWords.length, solve, solved]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: activeQuestion == index ? \"inline-block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, givenLyrics), /*#__PURE__*/React.createElement(\"div\", {\n    ref: renderedWords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, missingWords), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      display: solved ? \"none\" : \"block\"\n    },\n    onClick: skip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"SKIP\"), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      display: solved ? \"block\" : \"none\"\n    },\n    onClick: solve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"NEXT\"));\n}","map":{"version":3,"sources":["/Users/thomasadrian/Development/bridge-challenge/src/Question.jsx"],"names":["React","useState","useRef","useEffect","useCallback","Word","style","Question","givenLyrics","missingLyrics","activeQuestion","index","skip","solve","renderedWords","activeWord","setActiveWord","toNextWord","parseWords","sentence","words","split","map","word","i","push","missingWords","solved","markSolved","solveQuestion","length","console","log","display"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Word from \"./Word\";\nimport style from \"./style.module.css\";\n\nexport default function Question({\n  givenLyrics,\n  missingLyrics,\n  activeQuestion,\n  index,\n  skip,\n  solve,\n}) {\n  const renderedWords = useRef(null);\n\n  const [activeWord, setActiveWord] = useState(-1);\n  const toNextWord = useCallback(() => {\n    setActiveWord(activeWord + 1);\n  }, [activeWord]);\n\n  useEffect(() => {\n    if (activeQuestion == index) {\n      setActiveWord(0);\n    }\n  }, [activeQuestion, index]);\n\n  function parseWords(sentence) {\n    let words = sentence.split(\" \");\n    let renderedWords = words.map((word, i) => {\n      <Word\n        key={i}\n        index={i}\n        word={word}\n        toNextWord={toNextWord}\n        active={activeWord}\n      ></Word>;\n    });\n    for (let i in words) {\n      renderedWords.push();\n    }\n    return renderedWords;\n  }\n  const missingWords = parseWords(missingLyrics);\n\n  const [solved, markSolved] = useState(false);\n  useEffect(\n    function solveQuestion() {\n      if (!solved && activeWord === missingWords.length) {\n        console.log(\"solved\");\n        markSolved(true);\n      }\n    },\n    [activeWord, missingWords.length, solve, solved]\n  );\n\n  return (\n    <div style={{ display: activeQuestion == index ? \"inline-block\" : \"none\" }}>\n      <div>{givenLyrics}</div>\n      <div ref={renderedWords}>{missingWords}</div>\n      <button style={{ display: solved ? \"none\" : \"block\" }} onClick={skip}>\n        SKIP\n      </button>\n      <button style={{ display: solved ? \"block\" : \"none\" }} onClick={solve}>\n        NEXT\n      </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}